from gigachat import GigaChat
from gigachat.models import Chat, Messages, MessagesRole
from openai import OpenAI
import json


PROMPT = """Ты - помощник для анализа поисковых запросов о государственных закупках. 
Тебе нужно извлечь из запроса конкретные атрибуты и вернуть их в формате JSON.

Правила обработки запроса:
1. Если атрибут присутствует в запросе - извлеки его значение
2. Если атрибут не присутствует в запросе - верни значение "null"
2. Для дат используй формат yyyy-mm-dd


Список атрибутов для извлечения:
1. query - Наименование закупки
2. round - Этап закупки (Подача заявок, Работа комиссии, Закупка завершена, Закупка отменена)
3. date - Дата (Размещения, Обновления, Окончания)
4. document - Закон (44-ФЗ, 223-ФЗ, 615-ПП)
5. инн - код ИНН
6. заказчик - Наименование организации-заказчика. Приведи к именительному падежу (например, от Мосводоканал -> Мосводоканал)
7. min_price - минимальаня цена, от которой искать (например, от 100 тысяч)
8. max_price - максимальная цена, до которой искать (например, до 500 тысяч)
9. type - Способ закупки (Электронный аукцион, Запрос котировок, Открытый конкурс, Запрос цен и т.д.)
10. окпд2 - Код ОКПД2
11. region - город, республика, область, край

Пример:
Запрос: "Ищу закупки на строительство дорог в Москве по 44-ФЗ от 500 тысяч до 1 миллиона рублей, этап - подача заявок"
Результат:
{
    "query": "строительство дорог",
    "round": "Подача заявок",
    "date": null,
    "document": "44-ФЗ",
    "инн": null,
    "заказчик": null,
    "min_price": 500000,
    "max_price": 1000000,
    "type": null,
    "окпд2": null,
    "region": "Москва"
}
Не придумывай данные. Используй только инфорамцию из запроса. Если там нет конкретного атрибута, верни "null".
"""



PROMPT_FOR_REGION = """Извлеки код региона. 
Словарь для преобразования региона в код:: {'Республика Адыгея': '01', 'Республика Башкортостан': '02', 'Республика Бурятия': '03', 'Республика Алтай': '04', 'Республика Дагестан': '05', 'Ингушская Республика': '06', 'Кабардино-Балкарская Республика': '07', 'Республика Калмыкия': '08', 'Карачаево-Черкесская Республика': '09', 'Республика Карелия': '10', 'Республика Коми': '11', 'Республика Марий Эл': '12', 'Республика Мордовия': '13', 'Республика Саха': '14', 'Республика Северная Осетия': '15', 'Республика Татарстан': '16', 'Республика Тыва': '17', 'Удмуртская Республика': '18', 'Республика Хакасия': '19', 'Чеченская Республика': '20', 'Чувашская Республика': '21', 'Алтайский край': '22', 'Краснодарский край': '23', 'Красноярский край': '24', 'Приморский край': '25', 'Ставропольский край': '26', 'Хабаровский край': '27', 'Амурская область': '28', 'Архангельская область': '29', 'Астраханская область': '30', 'Белгородская область': '31', 'Брянская область': '32', 'Владимирская область': '33', 'Волгоградская область': '34', 'Вологодская область': '35', 'Воронежская область': '36', 'Ивановская область': '37', 'Иркутская область': '38', 'Калининградская область': '39', 'Калужская область': '40', 'Камчатская область': '41', 'Кемеровская область': '42', 'Кировская область': '43', 'Костромская область': '44', 'Курганская область': '45', 'Курская область': '46', 'Ленинградская область': '47', 'Липецкая область': '48', 'Магаданская область': '49', 'Московская область': '50', 'Мурманская область': '51', 'Нижегородская область': '52', 'Новгородская область': '53', 'Новосибирская область': '54', 'Омская область': '55', 'Оренбургская область': '56', 'Орловская область': '57', 'Пензенская область': '58', 'Пермская область': '59', 'Псковская область': '60', 'Ростовская область': '61', 'Рязанская область': '62', 'Самарская область': '63', 'Саратовская область': '64', 'Сахалинская область': '65', 'Свердловская область': '66', 'Смоленская область': '67', 'Тамбовская область': '68', 'Тверская область': '69', 'Томская область': '70', 'Тульская область': '71', 'Тюменская область': '72', 'Ульяновская область': '73', 'Челябинская область': '74', 'Читинская область': '75', 'Ярославская область': '76', 'г. Москва': '77', 'г. Санкт-Петербург': '78', 'Еврейская автономная область': '79', 'Агинский Бурятский автономный округ': '80', 'Коми-Пермяцкий автономный округ': '81', 'Корякский автономный округ': '82', 'Ненецкий автономный округ': '83', 'Таймырский (Долгано-Ненецкий) автономный округ': '84', 'Усть-Ордынский Бурятский автономный округ': '85', 'Ханты-Мансийский автономный округ': '86', 'Чукотский автономный округ': '87', 'Эвенкийский автономный округ': '88', 'Ямало-Ненецкий автономный округ': '89', 'Иные территории, включая город и космодром Байконур': '99',
'Республика Крым':'91', 'Севастополь':'92'}

Например: 
Москва - 77
Санкт-Петербург - 78

Напечатай только код региона.
"""

def parse_query(SEARCH_QUERY):
    payload = Chat(
        messages=[
            Messages(
                role=MessagesRole.SYSTEM,
                content=PROMPT
            ),
        ],
        temperature=0.7,
        max_tokens=200,
    )
    giga = GigaChat(credentials="YWQxMDllYmQtZDA0ZC00MDM2LWEyMjktMWU1ZTJlOTViNzkyOmY2NWU0YjE2LWE0ZDctNGNlOC05M2RiLWZkZjgwZDc5YTUyYw==", verify_ssl_certs=False)
    payload.messages.append(Messages(role=MessagesRole.USER, content=SEARCH_QUERY))
    response = giga.chat(payload)
    print(response.choices[0].message.content)

    # client = OpenAI(api_key = "sk-932d7d920e77485fb7f455cbc5e8e87b", base_url = 'https://api.deepseek.com')
    # response = client.chat.completions.create(
    #     model="deepseek-chat",
    #     messages=[
    #         {
    #         "role": "system",
    #         "content": [
    #             {
    #             "type": "text",
    #             "text": PROMPT
    #             }
    #         ]
    #         },
    #         {
    #         "role": "user",
    #         "content": [
    #             {
    #             "type": "text",
    #             "text": SEARCH_QUERY
    #             }
    #         ]
    #         }    
    #     ],
    # response_format={
    #     "type": "json_object"
    # },
    # )
    data = json.loads(response.choices[0].message.content)
    for key, value in data.items():
        if value == "null":
            data[key] = None
    
    if 'region' in data and data["region"] is not None:
        data["region"] = parse_region(data["region"])
    
    if 'заказчик' in data and data["заказчик"] is not None:
        data["заказчик"] = data["заказчик"].upper()
    return data


def parse_region(REGION):
    payload = Chat(
        messages=[
            Messages(
                role=MessagesRole.SYSTEM,
                content=PROMPT_FOR_REGION
            ),
        ],
        temperature=0.7,
        max_tokens=200,
    )
    giga = GigaChat(credentials="YWQxMDllYmQtZDA0ZC00MDM2LWEyMjktMWU1ZTJlOTViNzkyOmY2NWU0YjE2LWE0ZDctNGNlOC05M2RiLWZkZjgwZDc5YTUyYw==", verify_ssl_certs=False)
    payload.messages.append(Messages(role=MessagesRole.USER, content=REGION))
    response = giga.chat(payload)

    # client = OpenAI(api_key = "sk-932d7d920e77485fb7f455cbc5e8e87b", base_url = 'https://api.deepseek.com')
    # response = client.chat.completions.create(
    #     model="deepseek-chat",
    #     messages=[
    #         {
    #         "role": "system",
    #         "content": [
    #             {
    #             "type": "text",
    #             "text": PROMPT_FOR_REGION
    #             }
    #         ]
    #         },
    #         {
    #         "role": "user",
    #         "content": [
    #             {
    #             "type": "text",
    #             "text": REGION
    #             }
    #         ]
    #         }    
    #     ],
    # )    
    return response.choices[0].message.content

if __name__ == "__main__":
    query = "тендеры по закупке продуктов в Саратове от 20 февраля 2025 на этапе подачи заявок по 615 пп с минимальной ценой контракта 200 тыс руб от больницы. нужен открытый конкурс. до 500 тыс рублей"
    print(parse_query(query))
    query = 'Республика Крым'
    print(parse_region(query))