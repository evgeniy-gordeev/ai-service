{"ast":null,"code":"// Используем относительный URL в production или localhost в разработке\nconst API_URL = process.env.NODE_ENV === 'production' ? '/api' : 'http://localhost:8001';\nexport const searchTenders = async query => {\n  try {\n    const response = await fetch(`${API_URL}/search?query=${encodeURIComponent(query)}`);\n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    const data = await response.json();\n\n    // Преобразование данных из API в формат, понятный для компонентов\n    return data.map(tender => ({\n      id: tender.id,\n      title: tender.name,\n      price: tender.price,\n      date: new Date(tender.publish_date).toLocaleDateString('ru-RU'),\n      customer: tender.customer_name\n    }));\n  } catch (error) {\n    console.error('Error fetching tenders:', error);\n    // В случае ошибки возвращаем тестовые данные\n    return [{\n      id: '0173100007523000154',\n      title: 'Поставка медицинского оборудования для больницы №1',\n      price: 15000000,\n      date: '15.03.2024',\n      customer: 'ГБУЗ Городская больница №1'\n    }\n    // ... остальные тестовые данные\n    ];\n  }\n};","map":{"version":3,"names":["API_URL","process","env","NODE_ENV","searchTenders","query","response","fetch","encodeURIComponent","ok","Error","data","json","map","tender","id","title","name","price","date","Date","publish_date","toLocaleDateString","customer","customer_name","error","console"],"sources":["/root/ai-service/frontend/src/services/api.js"],"sourcesContent":["// Используем относительный URL в production или localhost в разработке\nconst API_URL = process.env.NODE_ENV === 'production' \n  ? '/api' \n  : 'http://localhost:8001';\n\nexport const searchTenders = async (query) => {\n  try {\n    const response = await fetch(`${API_URL}/search?query=${encodeURIComponent(query)}`);\n    \n    if (!response.ok) {\n      throw new Error('Network response was not ok');\n    }\n    \n    const data = await response.json();\n    \n    // Преобразование данных из API в формат, понятный для компонентов\n    return data.map(tender => ({\n      id: tender.id,\n      title: tender.name,\n      price: tender.price,\n      date: new Date(tender.publish_date).toLocaleDateString('ru-RU'),\n      customer: tender.customer_name,\n    }));\n    \n  } catch (error) {\n    console.error('Error fetching tenders:', error);\n    // В случае ошибки возвращаем тестовые данные\n    return [\n      {\n        id: '0173100007523000154',\n        title: 'Поставка медицинского оборудования для больницы №1',\n        price: 15000000,\n        date: '15.03.2024',\n        customer: 'ГБУЗ Городская больница №1'\n      },\n      // ... остальные тестовые данные\n    ];\n  }\n}; "],"mappings":"AAAA;AACA,MAAMA,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GACjD,MAAM,GACN,uBAAuB;AAE3B,OAAO,MAAMC,aAAa,GAAG,MAAOC,KAAK,IAAK;EAC5C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGP,OAAO,iBAAiBQ,kBAAkB,CAACH,KAAK,CAAC,EAAE,CAAC;IAEpF,IAAI,CAACC,QAAQ,CAACG,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAChD;IAEA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;;IAElC;IACA,OAAOD,IAAI,CAACE,GAAG,CAACC,MAAM,KAAK;MACzBC,EAAE,EAAED,MAAM,CAACC,EAAE;MACbC,KAAK,EAAEF,MAAM,CAACG,IAAI;MAClBC,KAAK,EAAEJ,MAAM,CAACI,KAAK;MACnBC,IAAI,EAAE,IAAIC,IAAI,CAACN,MAAM,CAACO,YAAY,CAAC,CAACC,kBAAkB,CAAC,OAAO,CAAC;MAC/DC,QAAQ,EAAET,MAAM,CAACU;IACnB,CAAC,CAAC,CAAC;EAEL,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C;IACA,OAAO,CACL;MACEV,EAAE,EAAE,qBAAqB;MACzBC,KAAK,EAAE,oDAAoD;MAC3DE,KAAK,EAAE,QAAQ;MACfC,IAAI,EAAE,YAAY;MAClBI,QAAQ,EAAE;IACZ;IACA;IAAA,CACD;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}