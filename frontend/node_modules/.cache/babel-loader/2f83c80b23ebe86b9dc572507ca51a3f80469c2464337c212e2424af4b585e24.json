{"ast":null,"code":"// Проверяем, что API_URL настроен правильно\nconst API_URL = process.env.NODE_ENV === 'production' ? '/api' : 'http://localhost:8001';\nexport const searchTenders = async query => {\n  try {\n    // Добавим логирование для отладки\n    console.log(`Searching for: ${query}`);\n    const response = await fetch(`${API_URL}/search?query=${encodeURIComponent(query)}`);\n    if (!response.ok) {\n      throw new Error(`Network response was not ok: ${response.status} ${response.statusText}`);\n    }\n    const data = await response.json();\n    console.log('API response:', data);\n\n    // Преобразуем данные в нужный формат\n    return data.map(tender => ({\n      id: tender.id,\n      title: tender.name,\n      price: tender.price,\n      date: new Date(tender.publish_date).toLocaleDateString('ru-RU'),\n      customer: tender.customer_name\n    }));\n  } catch (error) {\n    console.error('Error fetching tenders:', error);\n    // Возвращаем пустой массив в случае ошибки\n    return [];\n  }\n};","map":{"version":3,"names":["API_URL","process","env","NODE_ENV","searchTenders","query","console","log","response","fetch","encodeURIComponent","ok","Error","status","statusText","data","json","map","tender","id","title","name","price","date","Date","publish_date","toLocaleDateString","customer","customer_name","error"],"sources":["/root/ai-service/frontend/src/services/api.js"],"sourcesContent":["// Проверяем, что API_URL настроен правильно\nconst API_URL = process.env.NODE_ENV === 'production' \n  ? '/api' \n  : 'http://localhost:8001';\n\nexport const searchTenders = async (query) => {\n  try {\n    // Добавим логирование для отладки\n    console.log(`Searching for: ${query}`);\n    \n    const response = await fetch(`${API_URL}/search?query=${encodeURIComponent(query)}`);\n    \n    if (!response.ok) {\n      throw new Error(`Network response was not ok: ${response.status} ${response.statusText}`);\n    }\n    \n    const data = await response.json();\n    console.log('API response:', data);\n    \n    // Преобразуем данные в нужный формат\n    return data.map(tender => ({\n      id: tender.id,\n      title: tender.name,\n      price: tender.price,\n      date: new Date(tender.publish_date).toLocaleDateString('ru-RU'),\n      customer: tender.customer_name,\n    }));\n    \n  } catch (error) {\n    console.error('Error fetching tenders:', error);\n    // Возвращаем пустой массив в случае ошибки\n    return [];\n  }\n}; "],"mappings":"AAAA;AACA,MAAMA,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GACjD,MAAM,GACN,uBAAuB;AAE3B,OAAO,MAAMC,aAAa,GAAG,MAAOC,KAAK,IAAK;EAC5C,IAAI;IACF;IACAC,OAAO,CAACC,GAAG,CAAC,kBAAkBF,KAAK,EAAE,CAAC;IAEtC,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGT,OAAO,iBAAiBU,kBAAkB,CAACL,KAAK,CAAC,EAAE,CAAC;IAEpF,IAAI,CAACG,QAAQ,CAACG,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,gCAAgCJ,QAAQ,CAACK,MAAM,IAAIL,QAAQ,CAACM,UAAU,EAAE,CAAC;IAC3F;IAEA,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;IAClCV,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEQ,IAAI,CAAC;;IAElC;IACA,OAAOA,IAAI,CAACE,GAAG,CAACC,MAAM,KAAK;MACzBC,EAAE,EAAED,MAAM,CAACC,EAAE;MACbC,KAAK,EAAEF,MAAM,CAACG,IAAI;MAClBC,KAAK,EAAEJ,MAAM,CAACI,KAAK;MACnBC,IAAI,EAAE,IAAIC,IAAI,CAACN,MAAM,CAACO,YAAY,CAAC,CAACC,kBAAkB,CAAC,OAAO,CAAC;MAC/DC,QAAQ,EAAET,MAAM,CAACU;IACnB,CAAC,CAAC,CAAC;EAEL,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdvB,OAAO,CAACuB,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IAC/C;IACA,OAAO,EAAE;EACX;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}